module led_runner
(
      i_clk_50M,
      i_rst,
		i_key_l,
		i_key_r,
		
		o_led_wei,
		led_duan,
		o_led_agd,
		o_light,
		o_bell,
		o_dp,
		blood_count,
		o_rst

);
output reg o_rst;
output blood_count;
wire blood_count;
input i_clk_50M;
input i_rst;
input i_key_l;
input i_key_r;
output reg[2:0] o_led_agd;
output[7:0] o_led_wei;
output[1:0] led_duan;
output reg[5:0] o_light;
output o_bell;
output o_dp;
wire o_dp;
reg[24:0] cnt_clk;
reg[24:0] cnt_clk_w;
reg[25:0] counter;
reg[3:0] led_wei;
reg[1:0] led_duan;
reg[7:0] o_led_wei;
wire[5:0] o_light_w;
reg[2:0] led_agd_1;
wire[2:0] i_led_agd; 
reg tag;
reg tag_1;
reg tag_r;
reg[15:0] rand;
reg[32:0] rand_line;
reg[5:0] counter_r;
reg[7:0] random_r;
//-------------------------------
always @ ( *)
      o_rst=i_rst;
always @ ( *)
       o_light=o_light_w;
always @ (posedge i_clk_50M or negedge i_rst)//counter加到50M
      begin
      	if(!i_rst)
			  counter<=26'b0;
			else if(counter==26'h2faf080)			  
			  counter<=26'b0;			  
			else 
			  counter<=counter+1'b1;
	   end
always @ (posedge i_clk_50M or negedge i_rst)//tag_r一秒脉冲
       begin
		   if(!i_rst)
			  tag_r<=1'b0;
		   else if(counter==26'd50000000)
		     tag_r<=~tag_r;
			else
			  tag_r<=tag_r;
		 end
always @ (posedge i_clk_50M or negedge i_rst)//counter_q每半秒加满
      begin
		  if(!i_rst)
		    counter_q<=26'b0;
		  else if(counter_q==26'd25000000)
		    counter_q<=26'b0;
		  else
		    counter_q<=counter_q+1'b1;
		end
always @ (posedge i_clk_50M or negedge i_rst)//counter_t每四分之一秒加满
      begin
		  if(!i_rst)
		    counter_t<=26'b0;
		  else if(counter_q==26'd12500000)
		    counter_t<=26'b0;
		  else 
		    counter_t<=counter_t+1'b1;
	   end
reg[25:0] counter_q;
reg[25:0] counter_t;
always @ (posedge i_clk_50M or negedge i_rst)//tag做半秒脉冲
      begin
		 if(!i_rst)
		   tag<=1'b0;
		 else if(counter_q<=26'd12500000)
		   tag<=1'b1;
		 else 
		   tag=1'b0;
		 end
always @ (posedge i_clk_50M or negedge i_rst)//tag_1四分之一秒脉冲
        begin
		  if(!i_rst)
		    tag_1<=26'h0;
		  else if(counter_t<=26'd6750000)
		    tag_1<=1'b1;
		  else 
		    tag_1<=1'b0;
		  end 
                  
always @ (posedge tag or negedge i_rst)
       begin
		 if(!i_rst)
			begin
				counter_r<=5'h0;
			 end
		  
		  else if(tag_f==1'b1)
		    begin
				 counter_r<=5'h0;
			 end
			 else 
			  begin
				 counter_r<=counter_r+1'b1;
			  end
			end
always @ (posedge tag_f)
begin
		 
		//tag_f<=1'b0;
end


always @ ( *)
       random_r<=8'b10010010;
		 
always @ (posedge tag_1 or negedge i_rst)
       begin
		 if(!i_rst)
		 rand<={random_r[7:0],random_r[7:0]};
		 else
		 rand<=rand;
		 end
always @ (posedge tag_1 or negedge i_rst)
       begin
		 if(!i_rst)
       rand_line<={1'b1,rand[15],
						rand[14],1'b1,
						1'b1,rand[13],
						rand[12],1'b1,
						1'b1,rand[11],
						rand[10],1'b1,
						1'b1,rand[9],
						rand[8],1'b1,
						1'b1,rand[7],//---------------
						rand[6],1'b1,
						1'b1,rand[5],
						rand[4],1'b1,
						1'b1,rand[3],
						rand[2],1'b1,
						1'b1,rand[1],
						rand[0],1'b1,1'b1};
		 else if(counter_r==5'h9)
		  rand_line<={1'b1,rand[15],
						rand[14],1'b1,
						1'b1,rand[13],
						rand[12],1'b1,
						1'b1,rand[11],
						rand[10],1'b1,
						1'b1,rand[9],
						rand[8],1'b1,
						1'b1,rand[7],
						rand[6],1'b1,
						1'b1,rand[5],
					rand[4],1'b1,
						1'b1,rand[3],
						rand[2],1'b1,
					1'b1,rand[1],
						rand[0],1'b1,1'b1};
		else
		 rand_line<=rand_line;
		 end
//-----------------------------------------------
always @ (posedge i_clk_50M or negedge i_rst)
      begin
      	if(!i_rst)
			 begin
			 cnt_clk_w<=24'b0;
      	 cnt_clk<=24'b0;
			 end
      	else if(cnt_clk==24'h20124)
			 begin
			 cnt_clk<=24'b0;
			 cnt_clk_w<=24'b0;
			 end
			else
			 begin
			 cnt_clk_w<=cnt_clk_w+1'b1;
      	 cnt_clk<=cnt_clk+1'b1;
			 end
      end

//--------------------------------------        
always @ ( *)
      begin 
        case(led_wei)
    3'b000	:	o_led_wei = 8'b1110_1111;//选中第1个数码管
    3'b001	:	o_led_wei = 8'b1101_1111;
    3'b010	:	o_led_wei = 8'b1011_1111;
    3'b011	:	o_led_wei = 8'b0111_1111;
    3'b100	:	o_led_wei = 8'b1111_1110;
    3'b101	:	o_led_wei = 8'b1111_1101;
    3'b110	:	o_led_wei = 8'b1111_1011;
    3'b111	:	o_led_wei = 8'b1111_0111;//选中低8个数码管
    default	:	o_led_wei	= 8'b1111_1111;  
	      endcase
			end
always @ ( *)
      begin
		if(counter_r==5'h0)//1
		begin
   case(led_wei)
     3'b000	:	led_duan = {rand_line[18],rand_line[17]};
     3'b001	:	led_duan = {rand_line[20],rand_line[19]};
     3'b010	:	led_duan = {rand_line[22],rand_line[21]};
     3'b011	:	led_duan = {rand_line[24],rand_line[23]};
     3'b100	:	led_duan = {rand_line[26],rand_line[25]};
     3'b101	:	led_duan = {rand_line[28],rand_line[27]};
     3'b110	:	led_duan = {rand_line[30],rand_line[29]};
     3'b111	:	led_duan = {rand_line[32],rand_line[31]};//{1'b1,2'b01,1'b0,2'b11,1'b1,1'b1};
     default	:	led_duan = 2'b00;
   endcase
	tag_f=1'b0;
	end
	else if(counter_r==5'h1)
	 begin
   case(led_wei)
     3'b000	:	led_duan = {rand_line[16],rand_line[15]};
     3'b001	:	led_duan = {rand_line[18],rand_line[17]};
     3'b010	:	led_duan = {rand_line[20],rand_line[19]};
     3'b011	:	led_duan = {rand_line[22],rand_line[21]};
     3'b100	:	led_duan = {rand_line[24],rand_line[23]};
     3'b101	:	led_duan = {rand_line[26],rand_line[25]};
     3'b110	:	led_duan = {rand_line[28],rand_line[27]};
     3'b111	:	led_duan = {rand_line[30],rand_line[29]};//{1'b1,2'b01,1'b0,2'b11,1'b1,1'b1};
     default	:	led_duan = 2'b00;
   endcase
	tag_f=1'b0;
	end
  else if(counter_r==5'h2)
	 begin
   case(led_wei)
     3'b000	:	led_duan = {rand_line[14],rand_line[13]};
     3'b001	:	led_duan = {rand_line[16],rand_line[15]};
     3'b010	:	led_duan = {rand_line[18],rand_line[17]};
     3'b011	:	led_duan = {rand_line[20],rand_line[19]};
     3'b100	:	led_duan = {rand_line[22],rand_line[21]};
     3'b101	:	led_duan = {rand_line[24],rand_line[23]};
     3'b110	:	led_duan = {rand_line[26],rand_line[25]};
     3'b111	:	led_duan = {rand_line[28],rand_line[27]};//{1'b1,2'b01,1'b0,2'b11,1'b1,1'b1};
     default	:	led_duan = 2'b00;
   endcase
	//tag_f=1'b0;
	end
	else if(counter_r==5'h3)
	 begin
   case(led_wei)
     3'b000	:	led_duan = {rand_line[12],rand_line[11]};
     3'b001	:	led_duan = {rand_line[14],rand_line[13]};
     3'b010	:	led_duan = {rand_line[16],rand_line[15]};
     3'b011	:	led_duan = {rand_line[18],rand_line[17]};
     3'b100	:	led_duan = {rand_line[20],rand_line[19]};
     3'b101	:	led_duan = {rand_line[22],rand_line[21]};
     3'b110	:	led_duan = {rand_line[24],rand_line[23]};
     3'b111	:	led_duan = {rand_line[26],rand_line[25]};//{1'b1,2'b01,1'b0,2'b11,1'b1,1'b1};
     default	:	led_duan = 2'b00;
   endcase
	tag_f=1'b0;
	end
	else if(counter_r==5'h4)
	 begin
   case(led_wei)
     3'b000	:	led_duan = {rand_line[10],rand_line[9]};
     3'b001	:	led_duan = {rand_line[12],rand_line[11]};
     3'b010	:	led_duan = {rand_line[14],rand_line[13]};
     3'b011	:	led_duan = {rand_line[16],rand_line[15]};
     3'b100	:	led_duan = {rand_line[18],rand_line[17]};
     3'b101	:	led_duan = {rand_line[20],rand_line[19]};
     3'b110	:	led_duan = {rand_line[22],rand_line[21]};
     3'b111	:	led_duan = {rand_line[24],rand_line[23]};//{1'b1,2'b01,1'b0,2'b11,1'b1,1'b1};
     default	:	led_duan = 2'b00;
   endcase
	tag_f=1'b0;
	end
	else if(counter_r==5'h5)
	 begin
   case(led_wei)
     3'b000	:	led_duan = {rand_line[8],rand_line[7]};
     3'b001	:	led_duan = {rand_line[10],rand_line[9]};
     3'b010	:	led_duan = {rand_line[12],rand_line[11]};
     3'b011	:	led_duan = {rand_line[14],rand_line[13]};
     3'b100	:	led_duan = {rand_line[16],rand_line[15]};
     3'b101	:	led_duan = {rand_line[18],rand_line[17]};
     3'b110	:	led_duan = {rand_line[20],rand_line[19]};
     3'b111	:	led_duan = {rand_line[22],rand_line[21]};//{1'b1,2'b01,1'b0,2'b11,1'b1,1'b1};
     default	:	led_duan = 2'b00;
   endcase
	tag_f=1'b0;
	end
	else if(counter_r==5'h6)
	 begin
   case(led_wei)
     3'b000	:	led_duan = {rand_line[6],rand_line[5]};
     3'b001	:	led_duan = {rand_line[8],rand_line[7]};
     3'b010	:	led_duan = {rand_line[10],rand_line[9]};
     3'b011	:	led_duan = {rand_line[12],rand_line[11]};
     3'b100	:	led_duan = {rand_line[14],rand_line[13]};
     3'b101	:	led_duan = {rand_line[16],rand_line[15]};
     3'b110	:	led_duan = {rand_line[18],rand_line[17]};
     3'b111	:	led_duan = {rand_line[20],rand_line[19]};//{1'b1,2'b01,1'b0,2'b11,1'b1,1'b1};
     default	:	led_duan = 2'b00;
   endcase
	tag_f=1'b0;
	end
	else if(counter_r==5'h7)
	 begin
   case(led_wei)
     3'b000	:	led_duan = {rand_line[4],rand_line[3]};
     3'b001	:	led_duan = {rand_line[6],rand_line[5]};
     3'b010	:	led_duan = {rand_line[8],rand_line[7]};
     3'b011	:	led_duan = {rand_line[10],rand_line[9]};
     3'b100	:	led_duan = {rand_line[12],rand_line[11]};
     3'b101	:	led_duan = {rand_line[14],rand_line[13]};
     3'b110	:	led_duan = {rand_line[16],rand_line[15]};
     3'b111	:	led_duan = {rand_line[18],rand_line[17]};//{1'b1,2'b01,1'b0,2'b11,1'b1,1'b1};
     default	:	led_duan = 2'b00;
   endcase
	  tag_f=1'b0;
	end
	else if(counter_r==5'h8)
	 begin
   case(led_wei)
     3'b000	:	led_duan = {rand_line[2],rand_line[1]};
     3'b001	:	led_duan = {rand_line[4],rand_line[3]};
     3'b010	:	led_duan = {rand_line[6],rand_line[5]};
     3'b011	:	led_duan = {rand_line[8],rand_line[7]};
     3'b100	:	led_duan = {rand_line[10],rand_line[9]};
     3'b101	:	led_duan = {rand_line[12],rand_line[11]};
     3'b110	:	led_duan = {rand_line[14],rand_line[13]};
     3'b111	:	led_duan = {rand_line[16],rand_line[15]};//{1'b1,2'b01,1'b0,2'b11,1'b1,1'b1};
     default	:	led_duan = 2'b00;
   endcase
	  tag_f=1'b1;
	//counter_r<=5'h0;
	end
	else //if(counter_r==5'h9)//led_duan=2'b11;
	  begin
   case(led_wei)
	  3'b000	:	led_duan = {rand_line[2],rand_line[1]};
     3'b001	:	led_duan = {rand_line[4],rand_line[3]};
     3'b010	:	led_duan = {rand_line[6],rand_line[5]};
     3'b011	:	led_duan = {rand_line[8],rand_line[7]};
     3'b100	:	led_duan = {rand_line[10],rand_line[9]};
     3'b101	:	led_duan = {rand_line[12],rand_line[11]};
     3'b110	:	led_duan = {rand_line[14],rand_line[13]};
     3'b111	:	led_duan = {rand_line[16],rand_line[15]};//{1'b1,2'b01,1'b0,2'b11,1'b1,1'b1};
     default	:	led_duan = 2'b00;
   endcase
	end
//	else if(counter_r==5'h10)//led_duan=2'b11;
//	  begin
//   case(led_wei)
//     3'b000	:	led_duan = 2'b11;
//     3'b001	:	led_duan = 2'b11;
//     3'b010	:	led_duan = 2'b01;
//     3'b011	:	led_duan = 2'b11;
//     3'b100	:	led_duan = 2'b01;
//     3'b101	:	led_duan = 2'b11;
//     3'b110	:	led_duan = 2'b11;
//     3'b111	:	led_duan = 2'b11;//{1'b1,2'b01,1'b0,2'b11,1'b1,1'b1};
//     default	:	led_duan = 2'b00;
//   endcase
//	end
//	else if(counter_r==5'h11)//led_duan=2'b11;
//	  begin
//   case(led_wei)
//     3'b000	:	led_duan = 2'b11;
//     3'b001	:	led_duan = 2'b01;
//     3'b010	:	led_duan = 2'b11;
//     3'b011	:	led_duan = 2'b01;
//     3'b100	:	led_duan = 2'b11;
//     3'b101	:	led_duan = 2'b11;
//     3'b110	:	led_duan = 2'b11;
//     3'b111	:	led_duan = 2'b11;//{1'b1,2'b01,1'b0,2'b11,1'b1,1'b1};
//     default	:	led_duan = 2'b00;
//   endcase
//	end
//	else //led_duan=2'b11;
//	  begin
//   case(led_wei)
//     3'b000	:	led_duan = 2'b01;
//     3'b001	:	led_duan = 2'b11;
//     3'b010	:	led_duan = 2'b01;
//     3'b011	:	led_duan = 2'b11;
//     3'b100	:	led_duan = 2'b11;
//     3'b101	:	led_duan = 2'b11;
//     3'b110	:	led_duan = 2'b11;
//     3'b111	:	led_duan = 2'b11;//{1'b1,2'b01,1'b0,2'b11,1'b1,1'b1};
//     default	:	led_duan = 2'b00;
//   endcase
//	end
	end
reg tag_f;
always @ (posedge i_clk_50M)
      if(cnt_clk==24'h20124)
		  led_wei<=led_wei+1'b1;	
		 else
		  led_wei<=led_wei;
		  
always @ ( *)
      begin
		case(led_wei)
	  3'b000	:	o_led_agd = 3'b111;
     3'b001	:	o_led_agd = 3'b111;
     3'b010	:	o_led_agd = 3'b111;
     3'b011	:	o_led_agd = 3'b111;
     3'b100	:	o_led_agd = 3'b111;
     3'b101	:	o_led_agd = 3'b111;
     3'b110	:	o_led_agd = 3'b111;
     3'b111	:	o_led_agd = i_led_agd;
	  default: o_led_agd= 3'b111;
	   endcase
	   
	  end

part_1                      part_1
(
    .i_clk_50M        (i_clk_50M),
	 .i_rst            (i_rst), 
	 .i_key_l          (i_key_l),
	 .i_key_r          (i_key_r),
	 .cnt					(cnt_clk_w[17]), 
	 .o_led_agd     (i_led_agd)
);		 		  

judgement             judgement
(
    .i_clk_50M        (i_clk_50M),
	 .i_rst            (i_rst),
	 .led_agd          (o_led_agd),
	 .led_duan         (led_duan),
	 .o_light          (o_light_w),
    .o_bell           (o_bell),
	 .o_dp             (o_dp),
	 .blood_count       (blood_count)
);
endmodule
